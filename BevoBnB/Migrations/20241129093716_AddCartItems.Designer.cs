// <auto-generated />
using System;
using BevoBnB.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BevoBnB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241129093716_AddCartItems")]
    partial class AddCartItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BevoBnB.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("PropertyID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BevoBnB.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MessageID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BevoBnB.Models.MessageReply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReplyID");

                    b.HasIndex("MessageID");

                    b.HasIndex("SenderID");

                    b.ToTable("MessageReplies");
                });

            modelBuilder.Entity("BevoBnB.Models.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"), 3001L);

                    b.Property<bool>("AdminApproved")
                        .HasColumnType("bit");

                    b.Property<decimal>("Bathrooms")
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("FreeParking")
                        .HasColumnType("bit");

                    b.Property<int>("GuestsAllowed")
                        .HasColumnType("int");

                    b.Property<string>("HostID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MinNightsForDiscount")
                        .HasColumnType("int");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("PropertyStatus")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("WeekdayPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WeekendPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PropertyID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("HostID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("BevoBnB.Models.PropertyUnavailability", b =>
                {
                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnavailableDate")
                        .HasColumnType("date");

                    b.Property<string>("AddedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PropertyID", "UnavailableDate");

                    b.ToTable("PropertyUnavailabilities");
                });

            modelBuilder.Entity("BevoBnB.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"), 21901L);

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ConfirmationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TAX")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WeekdayPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WeekendPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ReservationID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BevoBnB.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DisputeStatus")
                        .HasColumnType("int");

                    b.Property<string>("HostComments")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<int>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.HasKey("ReviewID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BevoBnB.Models.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateID"));

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StateID");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateID = 1,
                            StateCode = "AL",
                            StateName = "Alabama"
                        },
                        new
                        {
                            StateID = 2,
                            StateCode = "AK",
                            StateName = "Alaska"
                        },
                        new
                        {
                            StateID = 3,
                            StateCode = "AZ",
                            StateName = "Arizona"
                        },
                        new
                        {
                            StateID = 4,
                            StateCode = "AR",
                            StateName = "Arkansas"
                        },
                        new
                        {
                            StateID = 5,
                            StateCode = "CA",
                            StateName = "California"
                        },
                        new
                        {
                            StateID = 6,
                            StateCode = "CO",
                            StateName = "Colorado"
                        },
                        new
                        {
                            StateID = 7,
                            StateCode = "CT",
                            StateName = "Connecticut"
                        },
                        new
                        {
                            StateID = 8,
                            StateCode = "DE",
                            StateName = "Delaware"
                        },
                        new
                        {
                            StateID = 9,
                            StateCode = "FL",
                            StateName = "Florida"
                        },
                        new
                        {
                            StateID = 10,
                            StateCode = "GA",
                            StateName = "Georgia"
                        },
                        new
                        {
                            StateID = 11,
                            StateCode = "HI",
                            StateName = "Hawaii"
                        },
                        new
                        {
                            StateID = 12,
                            StateCode = "ID",
                            StateName = "Idaho"
                        },
                        new
                        {
                            StateID = 13,
                            StateCode = "IL",
                            StateName = "Illinois"
                        },
                        new
                        {
                            StateID = 14,
                            StateCode = "IN",
                            StateName = "Indiana"
                        },
                        new
                        {
                            StateID = 15,
                            StateCode = "IA",
                            StateName = "Iowa"
                        },
                        new
                        {
                            StateID = 16,
                            StateCode = "KS",
                            StateName = "Kansas"
                        },
                        new
                        {
                            StateID = 17,
                            StateCode = "KY",
                            StateName = "Kentucky"
                        },
                        new
                        {
                            StateID = 18,
                            StateCode = "LA",
                            StateName = "Louisiana"
                        },
                        new
                        {
                            StateID = 19,
                            StateCode = "ME",
                            StateName = "Maine"
                        },
                        new
                        {
                            StateID = 20,
                            StateCode = "MD",
                            StateName = "Maryland"
                        },
                        new
                        {
                            StateID = 21,
                            StateCode = "MA",
                            StateName = "Massachusetts"
                        },
                        new
                        {
                            StateID = 22,
                            StateCode = "MI",
                            StateName = "Michigan"
                        },
                        new
                        {
                            StateID = 23,
                            StateCode = "MN",
                            StateName = "Minnesota"
                        },
                        new
                        {
                            StateID = 24,
                            StateCode = "MS",
                            StateName = "Mississippi"
                        },
                        new
                        {
                            StateID = 25,
                            StateCode = "MO",
                            StateName = "Missouri"
                        },
                        new
                        {
                            StateID = 26,
                            StateCode = "MT",
                            StateName = "Montana"
                        },
                        new
                        {
                            StateID = 27,
                            StateCode = "NE",
                            StateName = "Nebraska"
                        },
                        new
                        {
                            StateID = 28,
                            StateCode = "NV",
                            StateName = "Nevada"
                        },
                        new
                        {
                            StateID = 29,
                            StateCode = "NH",
                            StateName = "New Hampshire"
                        },
                        new
                        {
                            StateID = 30,
                            StateCode = "NJ",
                            StateName = "New Jersey"
                        },
                        new
                        {
                            StateID = 31,
                            StateCode = "NM",
                            StateName = "New Mexico"
                        },
                        new
                        {
                            StateID = 32,
                            StateCode = "NY",
                            StateName = "New York"
                        },
                        new
                        {
                            StateID = 33,
                            StateCode = "NC",
                            StateName = "North Carolina"
                        },
                        new
                        {
                            StateID = 34,
                            StateCode = "ND",
                            StateName = "North Dakota"
                        },
                        new
                        {
                            StateID = 35,
                            StateCode = "OH",
                            StateName = "Ohio"
                        },
                        new
                        {
                            StateID = 36,
                            StateCode = "OK",
                            StateName = "Oklahoma"
                        },
                        new
                        {
                            StateID = 37,
                            StateCode = "OR",
                            StateName = "Oregon"
                        },
                        new
                        {
                            StateID = 38,
                            StateCode = "PA",
                            StateName = "Pennsylvania"
                        },
                        new
                        {
                            StateID = 39,
                            StateCode = "RI",
                            StateName = "Rhode Island"
                        },
                        new
                        {
                            StateID = 40,
                            StateCode = "SC",
                            StateName = "South Carolina"
                        },
                        new
                        {
                            StateID = 41,
                            StateCode = "SD",
                            StateName = "South Dakota"
                        },
                        new
                        {
                            StateID = 42,
                            StateCode = "TN",
                            StateName = "Tennessee"
                        },
                        new
                        {
                            StateID = 43,
                            StateCode = "TX",
                            StateName = "Texas"
                        },
                        new
                        {
                            StateID = 44,
                            StateCode = "UT",
                            StateName = "Utah"
                        },
                        new
                        {
                            StateID = 45,
                            StateCode = "VT",
                            StateName = "Vermont"
                        },
                        new
                        {
                            StateID = 46,
                            StateCode = "VA",
                            StateName = "Virginia"
                        },
                        new
                        {
                            StateID = 47,
                            StateCode = "WA",
                            StateName = "Washington"
                        },
                        new
                        {
                            StateID = 48,
                            StateCode = "WV",
                            StateName = "West Virginia"
                        },
                        new
                        {
                            StateID = 49,
                            StateCode = "WI",
                            StateName = "Wisconsin"
                        },
                        new
                        {
                            StateID = 50,
                            StateCode = "WY",
                            StateName = "Wyoming"
                        });
                });

            modelBuilder.Entity("BevoBnB.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HireStatus")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "123 Admin St",
                            Birthday = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4d3550d1-8fe5-4ede-b140-a22f98ae1c76",
                            CreatedDate = new DateTime(2024, 11, 29, 12, 37, 14, 575, DateTimeKind.Local).AddTicks(3824),
                            Email = "admin1@bevobnb.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            HireStatus = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@BEVOBNB.COM",
                            NormalizedUserName = "ADMIN1@BEVOBNB.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6CAl42PmO2/GyqqcZ5wCG1IlRT/+4a8PYtSeBEezwnoi2Aq8Wl0TXcxfqnm2ULUg==",
                            Phone = "555-0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1833a764-0be3-4510-8633-3c423b69fa57",
                            TwoFactorEnabled = false,
                            UserName = "admin1@bevobnb.com",
                            UserType = 2
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "456 Admin Ave",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7266d710-2554-4e10-91d3-b1afe7a39899",
                            CreatedDate = new DateTime(2024, 11, 29, 12, 37, 14, 692, DateTimeKind.Local).AddTicks(1176),
                            Email = "admin2@bevobnb.com",
                            EmailConfirmed = true,
                            FirstName = "Main",
                            HireStatus = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@BEVOBNB.COM",
                            NormalizedUserName = "ADMIN2@BEVOBNB.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJrEejRF5XxZ9NfscT6nR6WsGphNaQOTJR8ezn346CcZLwN3InekQkGyRHzw/E/sgw==",
                            Phone = "555-0124",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed2540f8-0867-4354-84ed-df2832b44192",
                            TwoFactorEnabled = false,
                            UserName = "admin2@bevobnb.com",
                            UserType = 2
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "789 Host Rd",
                            Birthday = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6958f888-1b2a-4b3b-8de6-12bc0bd3b930",
                            CreatedDate = new DateTime(2024, 11, 29, 12, 37, 14, 773, DateTimeKind.Local).AddTicks(2124),
                            Email = "host@bevobnb.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            HireStatus = true,
                            LastName = "Host",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOST@BEVOBNB.COM",
                            NormalizedUserName = "HOST@BEVOBNB.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECbtZXwySoA1umuHsyeh4w/wGid/2pJM20y+S9DNxt8RsyP1g3pHuTi1DjKVVVDy7g==",
                            Phone = "555-0125",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87f6e0fc-0917-4bc5-9fa9-ac10e340e820",
                            TwoFactorEnabled = false,
                            UserName = "host@bevobnb.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "101 Customer Ln",
                            Birthday = new DateTime(1995, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a353da30-734b-4fb6-81e9-95747e75d7bb",
                            CreatedDate = new DateTime(2024, 11, 29, 12, 37, 14, 876, DateTimeKind.Local).AddTicks(4154),
                            Email = "customer@bevobnb.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            HireStatus = true,
                            LastName = "Customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@BEVOBNB.COM",
                            NormalizedUserName = "CUSTOMER@BEVOBNB.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4iCOr8hx4QlvKAYcckkl3LdhPai43jrSme8cqvpTA+OWlatU68gLxDcWezB9E7hw==",
                            Phone = "555-0126",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b481f39e-f82b-40be-9c15-d4df13c0c67d",
                            TwoFactorEnabled = false,
                            UserName = "customer@bevobnb.com",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "House"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Apartment"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Condo"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Cabin"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Villa"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Hotel Room"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Guest House"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Tiny House"
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryName = "Beach House"
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryName = "Farmhouse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Host",
                            NormalizedName = "HOST"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BevoBnB.Models.CartItem", b =>
                {
                    b.HasOne("BevoBnB.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BevoBnB.Models.Message", b =>
                {
                    b.HasOne("BevoBnB.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID");

                    b.HasOne("BevoBnB.Models.Users", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BevoBnB.Models.Users", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BevoBnB.Models.MessageReply", b =>
                {
                    b.HasOne("BevoBnB.Models.Message", "Message")
                        .WithMany("Replies")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BevoBnB.Models.Users", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BevoBnB.Models.Property", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BevoBnB.Models.Users", "Host")
                        .WithMany("Properties")
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("BevoBnB.Models.PropertyUnavailability", b =>
                {
                    b.HasOne("BevoBnB.Models.Property", "Property")
                        .WithMany("UnavailableDates")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BevoBnB.Models.Reservation", b =>
                {
                    b.HasOne("BevoBnB.Models.Users", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BevoBnB.Models.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BevoBnB.Models.Review", b =>
                {
                    b.HasOne("BevoBnB.Models.Users", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BevoBnB.Models.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BevoBnB.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BevoBnB.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BevoBnB.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BevoBnB.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BevoBnB.Models.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BevoBnB.Models.Property", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UnavailableDates");
                });

            modelBuilder.Entity("BevoBnB.Models.Users", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
