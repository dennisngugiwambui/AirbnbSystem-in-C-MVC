
    @*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
    @{
    }
    @*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
    @{
    }


    @using BevoBnB.ViewModels;
    @model List<ReviewManagementViewModel>

<div class="container mx-auto px-4">
    <!-- Analytics Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 mb-6">
        <!-- Total Reviews -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between">
                <div>
                    <p class="text-gray-500 text-sm">Total Reviews</p>
                    <p class="text-2xl font-bold">@ViewBag.TotalReviews</p>
                </div>
                <div class="text-blue-500">
                    <i class="fas fa-comments text-2xl"></i>
                </div>
            </div>
        </div>

        <!-- In the Average Rating card -->
        <p class="text-2xl font-bold">
            @(ViewBag.AverageRating != null ? ViewBag.AverageRating.ToString("F1") : "0.0") ⭐
        </p>

        <!-- In the Rating Distribution section -->
        @{
            var ratingDistribution = (Dictionary<int, int>)ViewBag.RatingDistribution ??
            new Dictionary<int, int>();
            var totalReviews = ViewBag.TotalReviews ?? 0;
        }

        <!-- Pending Disputes -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between">
                <div>
                    <p class="text-gray-500 text-sm">Pending Disputes</p>
                    <p class="text-2xl font-bold">@ViewBag.PendingDisputes</p>
                </div>
                <div class="text-red-500">
                    <i class="fas fa-exclamation-circle text-2xl"></i>
                </div>
            </div>
        </div>

        <!-- Reviews This Month -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between">
                <div>
                    <p class="text-gray-500 text-sm">Reviews This Month</p>
                    <p class="text-2xl font-bold">@ViewBag.ReviewsThisMonth</p>
                </div>
                <div class="text-green-500">
                    <i class="fas fa-chart-line text-2xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="bg-white rounded-lg shadow mb-6">
        <div class="p-6">
            <div class="flex flex-wrap gap-4">
                <div class="flex-1">
                    <input type="text" id="searchInput" placeholder="Search reviews..."
                           class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                </div>
                <select id="disputeFilter" class="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                    <option value="all">All Reviews</option>
                    <option value="disputed">Disputed Only</option>
                    <option value="resolved">Resolved</option>
                    <option value="removed">Removed</option>
                </select>
                <select id="ratingFilter" class="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                    <option value="all">All Ratings</option>
                    <option value="5">5 Stars</option>
                    <option value="4">4 Stars</option>
                    <option value="3">3 Stars</option>
                    <option value="2">2 Stars</option>
                    <option value="1">1 Star</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Reviews List -->
    <div class="bg-white rounded-lg shadow">
        <div class="p-6">
            <h2 class="text-xl font-semibold mb-4">Reviews</h2>

            @if (Model != null && Model.Any())
            {
                <div class="space-y-6">
                    @foreach (var review in Model)
                    {
                        <div class="review-card border rounded-lg p-4 @(review.DisputeStatus == DisputeStatus.Disputed ? "bg-yellow-50" : "bg-white")"
                             data-rating="@review.Rating" data-status="@review.DisputeStatus.ToString().ToLower()">
                            <div class="flex justify-between items-start mb-4">
                                <div>
                                    <h3 class="font-semibold">Property: @review.PropertyNumber</h3>
                                    <p class="text-sm text-gray-600">By: @review.CustomerName</p>
                                    <p class="text-sm text-gray-500">@review.CreatedDate.ToString("MMM dd, yyyy")</p>
                                </div>
                                <div class="flex items-center">
                                    @for (int i = 0; i < review.Rating; i++)
                                    {
                                        <span class="text-yellow-400">⭐</span>
                                    }
                                </div>
                            </div>

                            <p class="text-gray-700 mb-4">@review.ReviewText</p>

                            @if (!string.IsNullOrEmpty(review.HostComments))
                            {
                                <div class="bg-gray-50 p-4 rounded-lg mb-4">
                                    <p class="text-sm font-semibold text-gray-700">Host Response:</p>
                                    <p class="text-gray-600">@review.HostComments</p>
                                </div>
                            }

                            @if (review.DisputeStatus == DisputeStatus.Disputed)
                            {
                                <div class="border-t pt-4 mt-4">
                                    <h4 class="font-semibold text-red-600 mb-2">Dispute Details</h4>
                                    <p class="text-gray-700 mb-4">@review.DisputeText</p>

                                    <div class="flex gap-2">
                                        <form asp-action="ResolveDispute" method="post">
                                            <input type="hidden" name="id" value="@review.ReviewID" />
                                            <input type="hidden" name="upholdReview" value="true" />
                                            <button type="submit" class="px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200">
                                                Uphold Review
                                            </button>
                                        </form>

                                        <form asp-action="ResolveDispute" method="post">
                                            <input type="hidden" name="id" value="@review.ReviewID" />
                                            <input type="hidden" name="upholdReview" value="false" />
                                            <button type="submit" class="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200">
                                                Remove Review
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-8 text-gray-500">
                    <p>No reviews found</p>
                </div>
            }
        </div>

        <!-- Add this after your analytics cards -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h3 class="text-lg font-semibold mb-4">Rating Distribution</h3>
            <div class="space-y-2">

                @foreach (var rating in ratingDistribution.OrderByDescending(r => r.Key))
                {
                    @if (totalReviews > 0)
                    {
                        var percentage = (rating.Value * 100.0) / totalReviews;
                        <div class="flex items-center">
                            <div class="w-24">@rating.Key @(string.Concat(Enumerable.Repeat("⭐", rating.Key)))</div>
                            <div class="flex-1 mx-4">
                                <div class="bg-gray-200 rounded-full h-2">
                                    <div class="bg-yellow-400 rounded-full h-2" style="width: @percentage%"></div>
                                </div>
                            </div>
                            <div class="w-20 text-right text-sm text-gray-600">
                                @rating.Value (@percentage.ToString("F1")%)
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Update the review cards to use stars -->
        @if (Model != null)
        {
            @foreach (var review in Model)
            {
                <div class="review-card border rounded-lg p-4 @(review?.IsDisputed == true ? "bg-yellow-50" : "bg-white")"
                     data-rating="@(review?.Rating ?? 0)"
                     data-status="@(review?.DisputeStatus.ToString().ToLower() ?? "none")">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="font-semibold">Property: @(review?.PropertyNumber ?? "N/A")</h3>
                            <p class="text-sm text-gray-600">By: @(review?.CustomerName ?? "Anonymous")</p>
                            <p class="text-sm text-gray-500">@(review?.GetTimeAgo() ?? "N/A")</p>
                        </div>
                        <div class="flex flex-col items-end">
                            <div class="text-yellow-400">@(review?.GetStarRating() ?? "")</div>
                            <div class="text-sm text-gray-600">@(review?.GetRatingText() ?? "Not Rated")</div>
                        </div>
                    </div>

                    <p class="text-gray-700 mb-4">@(review?.GetTruncatedReviewText() ?? "")</p>

                    @if (!string.IsNullOrEmpty(review?.HostComments))
                    {
                        <div class="bg-gray-50 p-4 rounded-lg mb-4">
                            <p class="text-sm font-semibold text-gray-700">Host Response:</p>
                            <p class="text-gray-600">@review.HostComments</p>
                        </div>
                    }

                    @if (review?.IsDisputed == true)
                    {
                        <div class="border-t pt-4 mt-4">
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="@(review.GetDisputeStatusBadgeClass()) px-2 py-1 rounded-full text-sm">
                                    Disputed
                                </span>
                                @if (review.IsWithinDisputePeriod())
                                {
                                    <span class="text-sm text-gray-500">
                                        (Can be resolved)
                                    </span>
                                }
                            </div>

                            <div class="flex gap-2">
                                @if (review.ReviewID != 0)
                                {
                                    <form asp-action="ResolveDispute" method="post">
                                        <input type="hidden" name="id" value="@review.ReviewID" />
                                        <input type="hidden" name="upholdReview" value="true" />
                                        <button type="submit" class="px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200">
                                            Uphold Review
                                        </button>
                                    </form>

                                    <form asp-action="ResolveDispute" method="post">
                                        <input type="hidden" name="id" value="@review.ReviewID" />
                                        <input type="hidden" name="upholdReview" value="false" />
                                        <button type="submit" class="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200">
                                            Remove Review
                                        </button>
                                    </form>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="text-center py-8 text-gray-500">
                <p>No reviews available</p>
            </div>
        }
    </div>

</div>

    <script>
        $(document).ready(function() {
            const searchInput = $('#searchInput');
            const disputeFilter = $('#disputeFilter');
            const ratingFilter = $('#ratingFilter');
            const reviewCards = $('.review-card');

            function filterReviews() {a
                const searchTerm = searchInput.val().toLowerCase();
                const disputeValue = disputeFilter.val();
                const ratingValue = ratingFilter.val();

                reviewCards.each(function() {
                    const card = $(this);
                    const text = card.text().toLowerCase();
                    const status = card.data('status');
                    const rating = card.data('rating').toString();

                    const matchesSearch = text.includes(searchTerm);
                    const matchesDispute = disputeValue === 'all' || status === disputeValue;
                    const matchesRating = ratingValue === 'all' || rating === ratingValue;

                    card.toggle(matchesSearch && matchesDispute && matchesRating);
                });

                updateNoResultsMessage();
            }

            function updateNoResultsMessage() {
                const visibleReviews = reviewCards.filter(':visible').length;
                const noResultsMessage = $('#noResults');

                if (visibleReviews === 0) {
                    if (noResultsMessage.length === 0) {
                        $('<div id="noResults" class="text-center py-8 text-gray-500">' +
                          '<p>No reviews match your filters</p></div>')
                          .insertAfter(reviewCards.last());
                    }
                } else {
                    noResultsMessage.remove();
                }
            }

            searchInput.on('input', filterReviews);
            disputeFilter.on('change', filterReviews);
            ratingFilter.on('change', filterReviews);
        });
    </script>
