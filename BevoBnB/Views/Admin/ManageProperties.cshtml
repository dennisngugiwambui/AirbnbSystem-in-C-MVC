@using BevoBnB.ViewModels;
@model List<PropertyManagementDetailViewModel>

@section Scripts {
    <script>
        // All JavaScript code goes here
        function initializePropertyManagement() {
            // Search and Filter Functionality
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const categoryFilter = document.getElementById('categoryFilter');
            const propertyCards = document.querySelectorAll('.property-card');
            const noPropertiesMessage = document.getElementById('noProperties');
            const addPropertyModal = document.getElementById('addPropertyModal');

            function filterProperties() {
                const searchTerm = searchInput.value.toLowerCase();
                const statusValue = statusFilter.value;
                const categoryValue = categoryFilter.value;
                let visibleCount = 0;

                propertyCards.forEach(card => {
                    const propertyText = card.textContent.toLowerCase();
                    const status = card.dataset.status;
                    const category = card.dataset.category;

                    const matchesSearch = propertyText.includes(searchTerm);
                    const matchesStatus = statusValue === 'all' || status === statusValue;
                    const matchesCategory = categoryValue === 'all' || category === categoryValue;

                    if (matchesSearch && matchesStatus && matchesCategory) {
                        card.style.display = 'block';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                noPropertiesMessage.style.display = visibleCount === 0 ? 'block' : 'none';
            }

            // Event Listeners
            if (searchInput) searchInput.addEventListener('input', filterProperties);
            if (statusFilter) statusFilter.addEventListener('change', filterProperties);
            if (categoryFilter) categoryFilter.addEventListener('change', filterProperties);

            // Modal Functions
            window.openAddPropertyModal = function() {
                if (addPropertyModal) addPropertyModal.classList.remove('hidden');
            };

            window.closeAddPropertyModal = function() {
                if (addPropertyModal) addPropertyModal.classList.add('hidden');
            };

            window.openPropertyDetails = function(propertyId) {
                window.location.href = `/Admin/PropertyDetails/${propertyId}`;
            };

            // Image validation
            window.validateImage = function(input) {
                const maxSize = 5 * 1024 * 1024; // 5MB
                const acceptedTypes = ['image/jpeg', 'image/png'];

                if (input.files && input.files[0]) {
                    const file = input.files[0];

                    if (!acceptedTypes.includes(file.type)) {
                        alert('Please upload either a JPG or PNG image.');
                        input.value = '';
                        return;
                    }

                    if (file.size > maxSize) {
                        alert('File size must be less than 5MB');
                        input.value = '';
                        return;
                    }
                }
            };

            // Form submission handling
            const propertyForm = document.querySelector('form[asp-action="AddProperty"]');
            if (propertyForm) {
                propertyForm.addEventListener('submit', function(e) {
                    const submitButton = this.querySelector('button[type="submit"]');
                    if (submitButton) {
                        submitButton.disabled = true;
                        submitButton.innerHTML = 'Adding Property...';
                    }
                });
            }
        }

        // Initialize when document is ready
        $(document).ready(initializePropertyManagement);
    </script>
}

@{
    ViewData["Title"] = "Property Management";
}

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4" role="alert">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<!-- Main Content -->
<div class="container mx-auto px-4 bg-white shadow-lg rounded-lg">
    <!-- Header Section -->
    <div class="p-6 border-b border-gray-200">
        <div class="flex justify-between items-center">
            <div class="flex-1">
                <div class="flex space-x-4">
                    <div class="relative flex-1">
                        <input type="text"
                               id="searchInput"
                               placeholder="Search properties..."
                               class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                        <i class="fas fa-search absolute right-3 top-3 text-gray-400"></i>
                    </div>

                    <select id="statusFilter" class="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="all">All Status</option>
                        <option value="pending">Pending Approval</option>
                        <option value="approved">Approved</option>
                        <option value="inactive">Inactive</option>
                    </select>

                    <select id="categoryFilter" class="px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="all">All Categories</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.CategoryID">@category.CategoryName</option>
                        }
                    </select>

                    <button onclick="openAddPropertyModal()"
                            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        <i class="fas fa-plus mr-2"></i>Add Property
                    </button>
                </div>
            </div>
        </div>
    </div>
    @if (Model == null)
    {
        <div class="alert alert-warning">Model is null</div>
    }
    else if (!Model.Any())
    {
        <div class="alert alert-info">No properties found (Model is empty)</div>
    }
    else
    {
        <div class="alert alert-info">Found @Model.Count properties</div>
    }

    <!-- Your existing property grid code -->

    <!-- Properties Grid -->
    <div id="propertiesGrid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        @if (Model != null && Model.Any())
        {
            foreach (var property in Model)
            {
                <div class="property-card bg-white rounded-lg shadow-md overflow-hidden"
                     data-status="@(property.IsApproved ? "approved" : "pending")"
                     data-category="@property.Category">
                    <!-- Property Image -->
                    <div class="relative h-48">
                        <img src="@(string.IsNullOrEmpty(property.ImageUrl) ? "/images/placeholder.jpg" : property.ImageUrl)"
                             alt="@property.PropertyNumber"
                             class="w-full h-full object-cover"
                             onerror="this.src='/images/placeholder.jpg'">
                        <div class="absolute top-2 right-2 flex gap-2">
                            <span class="px-2 py-1 text-sm rounded-full
                                    @(property.IsApproved ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800")">
                                @(property.IsApproved ? "Approved" : "Pending")
                            </span>
                            @if (!property.IsActive)
                            {
                                <span class="px-2 py-1 text-sm rounded-full bg-red-100 text-red-800">
                                    Inactive
                                </span>
                            }
                        </div>
                    </div>

                    <!-- Property Info -->
                    <div class="p-4">
                        <div class="flex justify-between items-start mb-2">
                            <div>
                                <h3 class="font-semibold">@property.PropertyNumber</h3>
                                <p class="text-sm text-gray-600">@property.City, @property.State</p>
                            </div>
                            <span class="px-2 py-1 text-sm bg-blue-100 text-blue-800 rounded-full">
                                @property.Category
                            </span>
                        </div>

                        <div class="mt-3 text-sm text-gray-600">
                            <p>Host: @property.HostName</p>
                            <p class="mt-1">
                                <span class="font-semibold">Weekday:</span> $@property.WeekdayPrice
                                <span class="font-semibold ml-2">Weekend:</span> $@property.WeekendPrice
                            </p>
                        </div>

                        <div class="flex justify-between items-center mt-4">
                            <div class="flex items-center">
                                <span class="text-yellow-400">⭐</span>
                                <span class="ml-1">@property.AverageRating.ToString("F1")</span>
                                <span class="text-gray-400 ml-1">(@property.TotalReviews reviews)</span>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="mt-4 flex gap-2">
                            <button onclick="openPropertyDetails(@property.PropertyID)"
                                    class="flex-1 px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200">
                                View Details
                            </button>
                            @if (!property.IsApproved)
                            {
                                <form asp-action="ApproveProperty" method="post" class="flex-1">
                                    <input type="hidden" name="id" value="@property.PropertyID" />
                                    <button type="submit"
                                            class="w-full px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200">
                                        Approve
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div id="noProperties" class="col-span-full text-center py-10 bg-gray-50 rounded-lg">
                <p class="text-gray-500">No properties found</p>
            </div>
        }
    </div>
</div>

<!-- Add Property Modal -->
<div id="addPropertyModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-3xl bg-white rounded-lg">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold">Add New Property</h3>
            <button onclick="closeAddPropertyModal()" class="text-gray-600 hover:text-gray-800">&times;</button>
        </div>
        <form asp-action="AddProperty" method="post" enctype="multipart/form-data" onsubmit="return validatePropertyForm(this);">
            <div class="grid grid-cols-2 gap-4">
                <!-- Host Selection -->
                <div class="col-span-2">
                    <label class="block text-sm font-medium text-gray-700">Select Host</label>
                    <select name="HostID" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        <option value="">Choose a host...</option>
                        @foreach (var host in ViewBag.Hosts)
                        {
                            <option value="@host.Id">@host.FirstName @host.LastName</option>
                        }
                    </select>
                </div>

                <!-- Property Details -->
                <div>
                    <label class="block text-sm font-medium text-gray-700">Property Number</label>
                    <input type="text" name="PropertyNumber" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Category</label>
                    <select name="CategoryID" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.CategoryID">@category.CategoryName</option>
                        }
                    </select>
                </div>

                <!-- Address Fields -->
                <div>
                    <label class="block text-sm font-medium text-gray-700">Street</label>
                    <input type="text" name="Street" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">City</label>
                    <input type="text" name="City" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">State</label>
                    <input type="text" name="State" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">ZIP</label>
                    <input type="text" name="Zip" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                </div>

                <!-- Property Features -->
                <div class="col-span-2 grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Weekday Price</label>
                        <input type="number" step="0.01" name="WeekdayPrice" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700">Weekend Price</label>
                        <input type="number" step="0.01" name="WeekendPrice" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    </div>
                </div>

                <div class="col-span-2">
                    <label class="block text-sm font-medium text-gray-700">Property Image</label>
                    <input type="file" name="Image" accept="image/*"
                           class="mt-1 block w-full">
                </div>
            </div>

            <div class="mt-6 flex justify-end gap-4">
                <button type="button" onclick="closeAddPropertyModal()"
                        class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
                    Cancel
                </button>
                <button type="submit"
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                    Add Property
                </button>
            </div>
        </form>
    </div>
</div>

<script>
        function validatePropertyForm(form) {
        const requiredFields = form.querySelectorAll('[required]');
        let isValid = true;

        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                isValid = false;
                field.classList.add('border-red-500');
            } else {
                field.classList.remove('border-red-500');
            }
        });

        if (!isValid) {
            alert('Please fill in all required fields');
            return false;
        }

        const priceFields = ['WeekdayPrice', 'WeekendPrice', 'CleaningFee'];
        for (const fieldName of priceFields) {
            const field = form.querySelector(`[name="${fieldName}"]`);
            if (field && parseFloat(field.value) <= 0) {
                alert('Prices must be greater than zero');
                field.classList.add('border-red-500');
                return false;
            }
        }

        return true;
    }
</script>
